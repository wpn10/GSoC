#Data 
begin : data; 
	problem : initial value; 
end : data; 
 
#python #beginpreprocess at mnodes.mbd:8

#python 1 # from __future__ import print_function, division 
#python 2 # from MBDynLib import * 
#python 3 # import random 
#python 4 # ConstMBVar('N', 'integer', 10) 
#python 5 # for i in range(N): 
#python 6 #   ConstMBVar('NODE_' + str(i), 'integer', i) 
#python 7 #   ConstMBVar('BODY_' + str(i), 'integer', i) 
#python 8 #   ConstMBVar('Vy_' + str(i), 'integer', random.randint(0,5)) 
#python 9 #   ConstMBVar('Vz_' + str(i), 'integer', random.randint(0,5)) 
#python 10 #  
#python 11 # ConstMBVar('M', 'real' , 10) 
#python 12 # RelNodeNull = Position('', null()) 
#python 13 # RelNodeEye = Position('', eye()) 
#python 14 #  
#python 15 #  
#python 16 # nodes = [] 
#python 17 # bodies = [] 
#python #endpreprocess at mnodes.mbd:26

set: const integer N = 10;
set: const integer NODE_0 = 0;
set: const integer BODY_0 = 0;
set: const integer Vy_0 = 5;
set: const integer Vz_0 = 2;
set: const integer NODE_1 = 1;
set: const integer BODY_1 = 1;
set: const integer Vy_1 = 2;
set: const integer Vz_1 = 5;
set: const integer NODE_2 = 2;
set: const integer BODY_2 = 2;
set: const integer Vy_2 = 2;
set: const integer Vz_2 = 5;
set: const integer NODE_3 = 3;
set: const integer BODY_3 = 3;
set: const integer Vy_3 = 0;
set: const integer Vz_3 = 1;
set: const integer NODE_4 = 4;
set: const integer BODY_4 = 4;
set: const integer Vy_4 = 0;
set: const integer Vz_4 = 0;
set: const integer NODE_5 = 5;
set: const integer BODY_5 = 5;
set: const integer Vy_5 = 4;
set: const integer Vz_5 = 4;
set: const integer NODE_6 = 6;
set: const integer BODY_6 = 6;
set: const integer Vy_6 = 4;
set: const integer Vz_6 = 5;
set: const integer NODE_7 = 7;
set: const integer BODY_7 = 7;
set: const integer Vy_7 = 2;
set: const integer Vz_7 = 4;
set: const integer NODE_8 = 8;
set: const integer BODY_8 = 8;
set: const integer Vy_8 = 5;
set: const integer Vz_8 = 3;
set: const integer NODE_9 = 9;
set: const integer BODY_9 = 9;
set: const integer Vy_9 = 2;
set: const integer Vz_9 = 3;
set: const real M = 10;
 
 
# Initial values declaration  
begin : initial value; 
    initial time : 0.; 
    final time : 1.; 
    timestep : 1.e-3; 
    max iterations : 10; 
    tolerance : 1.e-6; 
end : initial value; 
 
 
# Control Data declaration 
begin : control data; 
    structural nodes : N; 
    rigid bodies : N; 
    gravity; 
end : control data; 
 
#python #beginpreprocess at mnodes.mbd:46

#python 1 # for i in range(N): 
#python 2 #   nodes.append(DynamicDisplacementNode('NODE_' + str(i), Position('', [0, 0, 0]), Position('', [0, 'Vy_' + str(i), 'Vz_' + str(i)]))) 
#python 3 #   bodies.append(PointMass('BODY_' + str(i), nodes[i].idx, M)) 
#python #endpreprocess at mnodes.mbd:50

 
begin: nodes; 
#python #beginpreprocess at mnodes.mbd:53

#python 1 # [print(n) for n in nodes] 
#python #endpreprocess at mnodes.mbd:55

structural: NODE_0, dynamic displacement,
	0, 0, 0,
	0, Vy_0, Vz_0;

structural: NODE_1, dynamic displacement,
	0, 0, 0,
	0, Vy_1, Vz_1;

structural: NODE_2, dynamic displacement,
	0, 0, 0,
	0, Vy_2, Vz_2;

structural: NODE_3, dynamic displacement,
	0, 0, 0,
	0, Vy_3, Vz_3;

structural: NODE_4, dynamic displacement,
	0, 0, 0,
	0, Vy_4, Vz_4;

structural: NODE_5, dynamic displacement,
	0, 0, 0,
	0, Vy_5, Vz_5;

structural: NODE_6, dynamic displacement,
	0, 0, 0,
	0, Vy_6, Vz_6;

structural: NODE_7, dynamic displacement,
	0, 0, 0,
	0, Vy_7, Vz_7;

structural: NODE_8, dynamic displacement,
	0, 0, 0,
	0, Vy_8, Vz_8;

structural: NODE_9, dynamic displacement,
	0, 0, 0,
	0, Vy_9, Vz_9;

end: nodes; 
 
 
begin:elements; 
#python #beginpreprocess at mnodes.mbd:60

#python 1 # [print(b) for b in bodies] 
#python #endpreprocess at mnodes.mbd:62

body: BODY_0, NODE_0, M;

body: BODY_1, NODE_1, M;

body: BODY_2, NODE_2, M;

body: BODY_3, NODE_3, M;

body: BODY_4, NODE_4, M;

body: BODY_5, NODE_5, M;

body: BODY_6, NODE_6, M;

body: BODY_7, NODE_7, M;

body: BODY_8, NODE_8, M;

body: BODY_9, NODE_9, M;

gravity : 0.,0.,-1.,const,9.81; 
end: elements; 
 
